@page "/mailboxsettings"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<h4>Mailbox Settings</h4>


<Validations StatusChanged="@OnStatusChanged">
    <Validation Validator="@ValidateEmail"  >
        <TextEdit Placeholder="Enter email" @bind-Text="mailboxSettings.EmailMailboxSettings" >
            <Feedback>
                <ValidationNone>Please enter the email.</ValidationNone>
                <ValidationSuccess>Email is good.</ValidationSuccess>
                <ValidationError>Enter valid email!</ValidationError>
            </Feedback>
        </TextEdit>
    </Validation>
    <br />
    <Button Color="Color.Primary" Disabled="@saveDisabled" PreventDefaultOnSubmit="true" Clicked="@Submit">Get mailbox settings for user</Button>
</Validations>



 <br /><br />

@if (mailboxSettingsData == null)
{
    <p><em>@noDataResult</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var mailboxSettings in mailboxSettingsData)
            {
                <tr>
                    <td>@mailboxSettings.Name</td>
                    <td>@mailboxSettings.Data</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MailboxSettingsData> mailboxSettingsData;
    private MailboxSettingsModel mailboxSettings { get; set; } = new MailboxSettingsModel();
    private string? noDataResult { get; set; } = "no data";
    bool saveDisabled = true;

    Task OnStatusChanged( ValidationsStatusChangedEventArgs eventArgs )
    {
        saveDisabled = eventArgs.Status != ValidationStatus.Success;

        return Task.CompletedTask;
    }

    void ValidateEmail( ValidatorEventArgs e )
    {
        var email = Convert.ToString( e.Value );

        e.Status = string.IsNullOrEmpty( email ) ? ValidationStatus.None :
             email.Contains( "@" ) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    async Task Submit()
    {
        await PostData(mailboxSettings.EmailMailboxSettings);
    }

    private async Task PostData(string email)
    {
        var token = await JSRuntime.InvokeAsync<string>("getAntiForgeryToken");
        var client = HttpClientFactory.CreateClient("default");
        client.DefaultRequestHeaders.Add("X-XSRF-TOKEN", token);
        var response = await client.PostAsJsonAsync<string>("api/GraphApiCalls/MailboxSettings", email);
        if(response.IsSuccessStatusCode)
        {
            mailboxSettingsData = await response.Content.ReadFromJsonAsync<List<MailboxSettingsData>>();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            mailboxSettingsData = null;
            noDataResult = error;
        }
    }
}