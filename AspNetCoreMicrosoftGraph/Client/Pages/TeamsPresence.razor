@page "/teamspresence"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h4>Teams Presence</h4>

<EditForm Model="@emailPresence">
    <Validations>
        <Validation Validator="@ValidateEmail"  >
            <TextEdit Placeholder="Enter email" @bind-Text="emailPresence.EmailPresence" >
                <Feedback>
                    <ValidationNone>Please enter the email.</ValidationNone>
                    <ValidationSuccess>Email is good.</ValidationSuccess>
                    <ValidationError>Enter valid email!</ValidationError>
                </Feedback>
            </TextEdit>
        </Validation>
        <br />
        <Button Color="Color.Primary" Clicked="@Submit">Get presence for user</Button>
    </Validations>
</EditForm>


 <br /><br />

@if (presenceData == null)
{
    <p><em>no data</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var presence in presenceData)
            {
                <tr>
                    <td>@presence.Name</td>
                    <td>@presence.Data</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PresenceData> presenceData;
    private EmailPresenceModel emailPresence { get; set; } = new EmailPresenceModel();

    void ValidateEmail( ValidatorEventArgs e )
    {
        var email = Convert.ToString( e.Value );

       e.Status = string.IsNullOrEmpty( email ) ? ValidationStatus.None :
            email.Contains( "@" ) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    async Task Submit()
    {
        await PostData(emailPresence.EmailPresence);
    }

    private async Task PostData(string email)
    {
        var token = await JSRuntime.InvokeAsync<string>("getAntiForgeryToken");
        Http.DefaultRequestHeaders.Add("X-XSRF-TOKEN", token);
        var response = await Http.PostAsJsonAsync<string>("api/GraphApiCalls/TeamsPresence", email);
        if(response.IsSuccessStatusCode)
        {
            presenceData = await response.Content.ReadFromJsonAsync<List<PresenceData>>();
        }
    }
}